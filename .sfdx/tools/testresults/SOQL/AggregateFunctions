/*

allow you to roll up and summarize your data in a query
SELECT COUNT() FROM Account

Max opportunity amount
SELECT MAX(Amount) FROM Opportunity

AVG()-average of a numeric field
COUNT() - COUNT(FliedName)-number of ros
COUNT_DISTINCT() -number of distinct non-null field values
MIN()-min value of a field
MAX()-max value of a field
SUM()-total sumn

*/

/*
GROUP BY
specify a group of records instead of processing many individual records
SELECT LeadSource, COUNT(id) From Lead GOURP BY LeadSource

HAVING Clause
optional clause to filter results that aggregate functions returns
SELECT StageName, SUM(Amount) FROM Opportunity GROUP BY StageName HAVING SUM(Amount)>50000


AGGREGATE FUNCTION
the output will not be and object, but a list or an error.
So we must use the querry like a List Declaration

AggregateResult[] groupedResults= [SELECT AVG(Amount), MAX(Amount) FROM Opportunity];
Double avgAmount= Double.valueOf(groupedResults[0].get('expr0'));
Double avgAmount= Double.valueOf(groupedResults[0].get('expr1'));

SOQL FOR LOOPS
for(AggregateResult result: [SELECT AVG(Amount), MAX(Amount) FROM Opportunity])
this improves the heap size of the code
*/
